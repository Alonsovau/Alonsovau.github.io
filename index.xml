<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xin Zhou Blog</title>
    <link>https://alonsovau.github.io/</link>
    <description>Recent content on Xin Zhou Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2019 Copyright Zhouxin</copyright>
    <lastBuildDate>Mon, 18 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://alonsovau.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>循环更新字段并自增</title>
      <link>https://alonsovau.github.io/2019/02/%E5%BE%AA%E7%8E%AF%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5%E5%B9%B6%E8%87%AA%E5%A2%9E/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2019/02/%E5%BE%AA%E7%8E%AF%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5%E5%B9%B6%E8%87%AA%E5%A2%9E/</guid>
      <description>set @range_id := 90000000; update TB_Category set RangeID = ( select @range_id := @range_id + 1 ) order by Id;</description>
    </item>
    
    <item>
      <title>安装lsyncd</title>
      <link>https://alonsovau.github.io/2019/02/%E5%AE%89%E8%A3%85lsyncd/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2019/02/%E5%AE%89%E8%A3%85lsyncd/</guid>
      <description>1. install Lua5.2 2. install rsync-3.1 3. install lsyncd-2.1.6 2.2.3版本在readhat7.1编译失败 cmake -DCMAKE_C_FLAGS=-ldl . make make install 参考github
PS: example文件夹下有配置文件
setting{ statusFile=&amp;#34;/tmp/lsyncd.stat&amp;#34;, statusInterval = 1, logfile=&amp;#34;/var/log/lsyncd-status.log&amp;#34;, } sync{ default.rsyncssh, source=&amp;#34;/root/zx&amp;#34;, targetdir=&amp;#34;/root/zx&amp;#34;, exclude={&amp;#39;*.csv&amp;#39;, &amp;#39;*.log&amp;#39;, &amp;#39;build&amp;#39;, &amp;#39;nbproject&amp;#39;}, host=&amp;#34;172.30.241.210&amp;#34;, delay=2, rsync = { archive=true, compress=false, whole_file=false, }, ssh = { port=22, --identityFile=&amp;#34;/root/.ssh/id_rsa.pub&amp;#34;, binary=&amp;#34;/usr/bin/ssh&amp;#34;, }, } sync{ default.rsyncssh, source=&amp;#34;/root/zx&amp;#34;, targetdir=&amp;#34;/cffex/zx&amp;#34;, exclude={&amp;#39;*.swx&amp;#39;, &amp;#39;*.swp&amp;#39;, &amp;#39;*.csv&amp;#39;, &amp;#39;*.log&amp;#39;, &amp;#39;build&amp;#39;, &amp;#39;nbproject&amp;#39;}, host=&amp;#34;zhx@172.31.197.10&amp;#34;, delay=2, rsync = { --rsh=&amp;#34;/usr/bin/ssh -l zhx -i /root/.</description>
    </item>
    
    <item>
      <title>Linux和Windows换行</title>
      <link>https://alonsovau.github.io/2019/02/linux%E5%92%8Cwindows%E6%8D%A2%E8%A1%8C/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2019/02/linux%E5%92%8Cwindows%E6%8D%A2%E8%A1%8C/</guid>
      <description>CRLF: Windows \r\n
 LF: Unix and OSX \n
 CR: Classic Mac \r
 Linux下查看格式：
  vi filename :set ff 或者 :set fileformat  修改  - sed -i &amp;#39;s/\r//g&amp;#39; filename - sed -i &amp;#39;s/^M//g&amp;#39; filename - vi filename 然后 set ff=unix 保存  PS:
  注意\^M在linux下写法,按^M是回车换行符,输入方法是按住CTRL+v,松开v,按m</description>
    </item>
    
    <item>
      <title>vmvare multiple network adapters configuration</title>
      <link>https://alonsovau.github.io/2019/02/vmvare-multiple-network-adapters-configuration/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2019/02/vmvare-multiple-network-adapters-configuration/</guid>
      <description>1. add second adapter to virtual machine 2. find out network device name, here is ens33 and ens38 ip a 2: ens33: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:0c:29:53:2f:a9 brd ff:ff:ff:ff:ff:ff inet 192.168.1.150/24 brd 192.168.1.255 scope global dynamic ens33 valid_lft 27719sec preferred_lft 27719sec inet6 fe80::20c:29ff:fe53:2fa9/64 scope link valid_lft forever preferred_lft forever 3: ens38: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:0c:29:53:2f:b3 brd ff:ff:ff:ff:ff:ff 3.</description>
    </item>
    
    <item>
      <title>csv文件操作</title>
      <link>https://alonsovau.github.io/2018/12/csv%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/12/csv%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>with open(&amp;#39;./old/zce_l1.csv&amp;#39;) as f: f_csv = csv.reader(f) headers = next(f_csv) print(headers) Row = namedtuple(&amp;#39;Row&amp;#39;, headers) for r in f_csv: row = Row(*r) print(row.</description>
    </item>
    
    <item>
      <title>watchdog</title>
      <link>https://alonsovau.github.io/2018/12/watchdog/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/12/watchdog/</guid>
      <description>The Linux kernel watchdog is used to monitor if a system is running. It is supposed to automatically reboot hanged systems due to unrecoverable software errors. The watchdog module is specific to the hardware or chip being used. Personal computer users don’t need watchdog as they can reset the system manually. However, it is useful for systems that are mission critical and need the ability to reboot themselves without human intervention.</description>
    </item>
    
    <item>
      <title>常用shell</title>
      <link>https://alonsovau.github.io/2018/12/%E5%B8%B8%E7%94%A8shell/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/12/%E5%B8%B8%E7%94%A8shell/</guid>
      <description>#得到当前脚本路径 script=`readlink -f $0` base_dir=`dirname $script` #循环该目录下所有文件 for exchange in `ls /target/sixreceiver -I mdloader` do done #生成一个uuid cat /proc/sys/kernel/random/uuid #查找不区分大小写的name并拷贝指定目录 find . -iname *config.xml -exec cp &amp;#39;{}&amp;#39; ./zx/zx \; #查看压缩包中文件 tar -vtf package.tar.gz #shell函数 func() { }</description>
    </item>
    
    <item>
      <title>编译找不到Lua</title>
      <link>https://alonsovau.github.io/2018/12/%E7%BC%96%E8%AF%91%E6%89%BE%E4%B8%8D%E5%88%B0lua/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/12/%E7%BC%96%E8%AF%91%E6%89%BE%E4%B8%8D%E5%88%B0lua/</guid>
      <description>cmake . -DLUA_INCLUDE_DIR=/usr/local/include/ -DLUA_LIBRARY=/usr/local/lib/liblua.</description>
    </item>
    
    <item>
      <title>查询RPM包信息</title>
      <link>https://alonsovau.github.io/2018/11/%E6%9F%A5%E8%AF%A2rpm%E5%8C%85%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/%E6%9F%A5%E8%AF%A2rpm%E5%8C%85%E4%BF%A1%E6%81%AF/</guid>
      <description># 查询文件属于哪个安装包 $ rpm -qf /usr/bin/ldd # 查询某个目录、文件、模块是由哪个包提供 $ rpm -q --whatprovides /usr/bin # 查询被哪个包需要 $ rpm -q --whatrequires /usr/bin/lynx # 查询包中文件 $ rpm -qpl filename # 查询已安装文件 $ rpm -ql name # 查询配置文件 $ rpm -qpc filename $ rpm -qc name # 查询所有信息 $ rpm -qpil filename $ rpm -qil name</description>
    </item>
    
    <item>
      <title>查询缺少的so由什么提供</title>
      <link>https://alonsovau.github.io/2018/11/%E6%9F%A5%E8%AF%A2%E7%BC%BA%E5%B0%91%E7%9A%84so%E7%94%B1%E4%BB%80%E4%B9%88%E6%8F%90%E4%BE%9B/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/%E6%9F%A5%E8%AF%A2%E7%BC%BA%E5%B0%91%E7%9A%84so%E7%94%B1%E4%BB%80%E4%B9%88%E6%8F%90%E4%BE%9B/</guid>
      <description>$ yum list name 可以看包版本 $ yum provides libselinux.so.1 libselinux-2.0.94-5.3.el6.i686 : SELinux library and simple utilities Repo : local Matched from: Other : libselinux.</description>
    </item>
    
    <item>
      <title>查看binary的symbol</title>
      <link>https://alonsovau.github.io/2018/11/%E6%9F%A5%E7%9C%8Bbinary%E7%9A%84symbol/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/%E6%9F%A5%E7%9C%8Bbinary%E7%9A%84symbol/</guid>
      <description>readelf -s filename nm filename |grep xxx</description>
    </item>
    
    <item>
      <title>fork后同步原仓库</title>
      <link>https://alonsovau.github.io/2018/11/fork%E5%90%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E4%BB%93%E5%BA%93/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/fork%E5%90%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E4%BB%93%E5%BA%93/</guid>
      <description>configuring a remote for a fork  查看远程状态  git remote -v # origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch) # origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)  添加一个将被同步给 fork 远程的上游仓库  git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git  再次查看远程状态  git remote -v # origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch) # origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push) # upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch) # upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push) syncing a fork  从原仓库fetch数据到本地，并会被存储在本地分支upstream/master  git fetch upstream # remote: Counting objects: 75, done. # remote: Compressing objects: 100% (53/53), done.</description>
    </item>
    
    <item>
      <title>根据进程名kill</title>
      <link>https://alonsovau.github.io/2018/11/%E6%A0%B9%E6%8D%AE%E8%BF%9B%E7%A8%8B%E5%90%8Dkill/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/%E6%A0%B9%E6%8D%AE%E8%BF%9B%E7%A8%8B%E5%90%8Dkill/</guid>
      <description>#!/bin/sh  if [ $# -lt 1 ] then echo Usage:xx exit 1 fi NAME=$1 echo $1 PID=`ps -ef|grep $NAME$ |grep -v $0 |awk &amp;#39;{print $2}&amp;#39;` echo $PID kill -9 $PID echo killed</description>
    </item>
    
    <item>
      <title>装饰器版高速fibonacci</title>
      <link>https://alonsovau.github.io/2018/11/%E8%A3%85%E9%A5%B0%E5%99%A8%E7%89%88%E9%AB%98%E9%80%9Ffibonacci/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/%E8%A3%85%E9%A5%B0%E5%99%A8%E7%89%88%E9%AB%98%E9%80%9Ffibonacci/</guid>
      <description>@functools.lru_cache()此行为关键 import time from functools import wraps import functools def clock(func): @wraps(func) def clocked(*args, **kwargs): start = time.time() result = func(*args, **kwargs) elapsed = time.time() - start name = func.__name__ args_list = [] if args: args_list.append(&amp;#39;,&amp;#39;.join(repr(arg) for arg in args)) if kwargs: pairs = [&amp;#39;%s=%r&amp;#39; % (k, w) for k, w in sorted(kwargs.items())] args_list.append(&amp;#39;,&amp;#39;.join(pairs)) args_str = &amp;#39;,&amp;#39;.join(args_list) print(&amp;#39;[%0.8fs] %s(%s) -&amp;gt; %r&amp;#39; % (elapsed, name, args_str, result)) return result return clocked @functools.</description>
    </item>
    
    <item>
      <title>core文件</title>
      <link>https://alonsovau.github.io/2018/11/core%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/core%E6%96%87%E4%BB%B6/</guid>
      <description>1.ulimit -c unlimited 2./proc/sys/kernel/core_pattern 2.或者/etc/sysctl.conf中添加kernel.core_pattern=core_%e_%p或sysctl -w kernel.core_pattern=core_%e_%p 3.查看/etc/security/limits.conf * soft core unlimited //所有用户 &amp;lt;user-login-id&amp;gt; soft core unlimited //设置某个用户 还有hard core需要考虑$sysctl -a|grep core_pattern kernel.core_pattern = |/usr/libexec/abrt-hook-ccpp /var/cache/abrt %p %s %u %c
“abrtd” creates a sub-directory (named something like “ccpp-1279914365-14618”) in the directory “/var/cache/abrt” as shown in the value of the variable. This also means that the core files will also be stored in that sub-directory in the “/var/cache/abrt” directory (in addition to the current directory where application was run).</description>
    </item>
    
    <item>
      <title>Tips</title>
      <link>https://alonsovau.github.io/2018/11/tips/</link>
      <pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/tips/</guid>
      <description> 并不是所有的装饰器都使用了@wraps，因此这里的方案并不全部适用。特别的，内置的装饰器@staticmethod和@classmethod就没有遵循这个约定(它们把原始函数存储在属性func中)
 dis模块反编译
  </description>
    </item>
    
    <item>
      <title>double精度(有问题)</title>
      <link>https://alonsovau.github.io/2018/10/double%E7%B2%BE%E5%BA%A6%E6%9C%89%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/10/double%E7%B2%BE%E5%BA%A6%E6%9C%89%E9%97%AE%E9%A2%98/</guid>
      <description> double小数前后加起来的有效数字只有16位，当给定的double有效数在16位以内转换为字符串不会丢失精度
 Code:
char precisionStr[100] = {0}; double precisionTest = 11.437565871234012; sprintf(precisionStr, &amp;#34;%.20f&amp;#34;, precisionTest); cout &amp;lt;&amp;lt; &amp;#34;precision----&amp;#34; &amp;lt;&amp;lt; precisionStr &amp;lt;&amp;lt; endl; precisionTest = 119.437565871234012; sprintf(precisionStr, &amp;#34;%.20f&amp;#34;, precisionTest); cout &amp;lt;&amp;lt; &amp;#34;precision----&amp;#34; &amp;lt;&amp;lt; precisionStr &amp;lt;&amp;lt; endl;  Output:
precision----11.43756587123401224915 precision----119.43756587123401402550 </description>
    </item>
    
    <item>
      <title>使用dict实现switch类似功能</title>
      <link>https://alonsovau.github.io/2018/10/%E4%BD%BF%E7%94%A8dict%E5%AE%9E%E7%8E%B0switch%E7%B1%BB%E4%BC%BC%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/10/%E4%BD%BF%E7%94%A8dict%E5%AE%9E%E7%8E%B0switch%E7%B1%BB%E4%BC%BC%E5%8A%9F%E8%83%BD/</guid>
      <description>switch_dict = { &amp;#39;char&amp;#39;: lambda x: &amp;#39;i am char&amp;#39; + x, &amp;#39;double&amp;#39;: lambda x: &amp;#39;i am double&amp;#39; + x, &amp;#39;int&amp;#39;: lambda x: &amp;#39;i am int&amp;#39; + x } print(switch_dict[&amp;#39;char&amp;#39;](&amp;#39;999&amp;#39;))</description>
    </item>
    
    <item>
      <title>netbeans修改默认编码</title>
      <link>https://alonsovau.github.io/2018/10/netbeans%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/10/netbeans%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81/</guid>
      <description>项目级别，修改项目属性
 整体IDE,修改etc/netbeans.conf,-J-Dfile.encoding=UTF-8
  netbeans_default_options=&amp;#34;-J-client -J-Xss2m -J-Xms32m -J-XX:PermSize=32m -J-XX:MaxPermSize=200m -J-Dapple.laf.useScreenMenuBar=true -J-Dapple.awt.graphics.UseQuartz=true -J-Dsun.java2d.noddraw=true -J-Dfile.</description>
    </item>
    
    <item>
      <title>宏定义define和常量const的区别</title>
      <link>https://alonsovau.github.io/2018/10/%E5%AE%8F%E5%AE%9A%E4%B9%89define%E5%92%8C%E5%B8%B8%E9%87%8Fconst%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/10/%E5%AE%8F%E5%AE%9A%E4%B9%89define%E5%92%8C%E5%B8%B8%E9%87%8Fconst%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>类型和安全检查不同
  宏定义是字符替换，没有数据类型的区别，同时这种替换没有类型安全检查，可能产生边际效应等错误；
const常量是常量的声明，有类型区别，需要在编译阶段进行类型检查
 编译器处理不同
  宏定义是一个&amp;rdquo;编译时&amp;rdquo;概念，在预处理阶段展开，不能对宏定义进行调试，生命周期结束与编译时期；
const常量是一个&amp;rdquo;运行时&amp;rdquo;概念，在程序运行使用，类似于一个只读行数据
 存储方式不同
  宏定义是直接替换，不会分配内存，存储与程序的代码段中；
const常量需要进行内存分配，存储与程序的数据段中</description>
    </item>
    
    <item>
      <title>不建议使用字符串常量到 char*的转换</title>
      <link>https://alonsovau.github.io/2018/09/%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E5%88%B0-char%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/09/%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E5%88%B0-char%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
      <description>不建议使用字符串常量到 char*的转换 char* p = &amp;#34;test&amp;#34;; 声明了一个指针，而这个指针指向的是全局的const内存区，如果你一定要写这块内存的话，那就是一个非常严重的内存错误 在声明字符串字面量时，应该加上const. const char *p = &amp;#34;test&amp;#34;; </description>
    </item>
    
    <item>
      <title>账户锁定及SSH登录失败</title>
      <link>https://alonsovau.github.io/2018/09/%E8%B4%A6%E6%88%B7%E9%94%81%E5%AE%9A%E5%8F%8Assh%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/09/%E8%B4%A6%E6%88%B7%E9%94%81%E5%AE%9A%E5%8F%8Assh%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5/</guid>
      <description>1. Pam_Tally2解锁SSH登录失败锁定 路径: /etc/pam.d/password-auth，/etc/pam.d/system-auth A pluggable authentication module (PAM) is a mechanism to integrate multiple low-level authentication schemes into a high-level application programming interface (API) Example: auth required pam_tally2.so deny=4 even_deny_root unlock_time=1200  deny 指定最大几次认证错误，如果超出此错误，将执行后面的策略。如锁定N秒，如果后面没有其他策略指定时，默认永远锁定，除非手动解锁
 lock_time 锁定多长时间，按秒为单位
 unlock_time 指定认证被锁后，多长时间自动解锁用户
 even_deny_root root用户在认证出错时，一样被锁定
  2. 查看状态与解锁 pam_tally2 --user oracle pam_tally2 --user oracle --reset 3. Linux锁定账号  禁止个别用户登录(su可切换)
passwd -l test passwd -u test 修改shell类型禁止登录(su切换不可)
cat /etc/passwd |grep zx 锁定： sed -i &amp;#39;s#/home/zx:/bin/bash#/home/zx:/sbin/nologin#g&amp;#39; /etc/passwd 等价于： usermod zx -s /sbin/nologin 解锁： sed -i &amp;#39;s#/home/zx:/sbin/nologin#/home/zx:/bin/bash#g&amp;#39; /etc/passwd 等价于： usermod zx -s /bin/bash 禁止其他用户登录(su可切换)</description>
    </item>
    
    <item>
      <title>tcpdump</title>
      <link>https://alonsovau.github.io/2018/09/tcpdump/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/09/tcpdump/</guid>
      <description>tcpdump -i eth0 vrrp -n</description>
    </item>
    
    <item>
      <title>apt search精确匹配</title>
      <link>https://alonsovau.github.io/2018/07/apt-search%E7%B2%BE%E7%A1%AE%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/apt-search%E7%B2%BE%E7%A1%AE%E5%8C%B9%E9%85%8D/</guid>
      <description>apt search: limit to exact match
apt search ^python$ #正则表达式 apt search --names-only python</description>
    </item>
    
    <item>
      <title>mysql命令行执行sql语句并输出到log</title>
      <link>https://alonsovau.github.io/2018/07/mysql%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8Csql%E8%AF%AD%E5%8F%A5%E5%B9%B6%E8%BE%93%E5%87%BA%E5%88%B0log/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/mysql%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8Csql%E8%AF%AD%E5%8F%A5%E5%B9%B6%E8%BE%93%E5%87%BA%E5%88%B0log/</guid>
      <description>mysql -uroot -p -f -h172.28.10.83 -P3382 pms_db &amp;lt; Log.sql_2018-07-24_08-59.sql &amp;gt; t.log 2&amp;gt;&amp;amp;1</description>
    </item>
    
    <item>
      <title>计算小段代码运行时间</title>
      <link>https://alonsovau.github.io/2018/07/%E8%AE%A1%E7%AE%97%E5%B0%8F%E6%AE%B5%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/%E8%AE%A1%E7%AE%97%E5%B0%8F%E6%AE%B5%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</guid>
      <description>t1 = timeit.timeit(&amp;#39;f = open(&amp;#34;Log.log_2018-07-10_04-43.log&amp;#34;, encoding=&amp;#34;GBK&amp;#34;);x = sum([l.count(&amp;#34;insert&amp;#34;) for l in f]);&amp;#39; &amp;#39;print(x)&amp;#39;, &amp;#39;&amp;#39;, number=5) # 第二个参数为运行前环境设置，如import timeit</description>
    </item>
    
    <item>
      <title>查询Linux进程启动和运行时间</title>
      <link>https://alonsovau.github.io/2018/07/%E6%9F%A5%E8%AF%A2linux%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/%E6%9F%A5%E8%AF%A2linux%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</guid>
      <description>ps -eo pid,start,etime,cmd |grep -v grep | grep ss</description>
    </item>
    
    <item>
      <title>No MTA installed, discarding output</title>
      <link>https://alonsovau.github.io/2018/07/no-mta-installed-discarding-output/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/no-mta-installed-discarding-output/</guid>
      <description> 配置邮件服务器
 重定向到文件或者/dev/null：cd /opt/ &amp;amp;&amp;amp; ./start_sslocal.sh &amp;gt;zx.log 2&amp;gt;&amp;amp;1
  </description>
    </item>
    
    <item>
      <title>添加开机启动脚本</title>
      <link>https://alonsovau.github.io/2018/07/%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</guid>
      <description>1.crontab -e
1. crontab -e 2. @reboot cd /opt/ &amp;amp;&amp;amp; ./start_sslocal.sh &amp;gt;zx.log 2&amp;gt;&amp;amp;1 3. grep CRON -i /var/log/syslog 2.</description>
    </item>
    
    <item>
      <title>Ubuntu网卡重启</title>
      <link>https://alonsovau.github.io/2018/07/ubuntu%E7%BD%91%E5%8D%A1%E9%87%8D%E5%90%AF/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/ubuntu%E7%BD%91%E5%8D%A1%E9%87%8D%E5%90%AF/</guid>
      <description>ifconfig ens33 down &amp;amp;&amp;amp; ifconfig ens33 up</description>
    </item>
    
    <item>
      <title>命令行设置代理</title>
      <link>https://alonsovau.github.io/2018/07/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</guid>
      <description>sslocal
apt install shadowsocks sslocal -c ss.json -d startss.json: { &amp;#34;server&amp;#34;:&amp;#34;45.32.10.1&amp;#34;, &amp;#34;server_port&amp;#34;:8892, &amp;#34;local_port&amp;#34;:1080, &amp;#34;password&amp;#34;:&amp;#34;zxzxzxzxzx&amp;#34;, &amp;#34;timeout&amp;#34;:600, &amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34; } proxychains4
apt install proxychains4 vi /etc/proxychains4.conf proxychains4 curl ip.cn # 查看是否代理成功 proxychains bash # 代理整个终端proxychains4.conf: socks5 127.0.0.1 1080 GitHub
 polipo可代替proxychains4
apt-get install polipo vi /etc/polipo/config service polipo restart export http_proxy=&amp;#34;http://127.0.0.1:8123/&amp;#34; # 可能需要执行 可加入.bashrc/etc/polipo/config: logSyslog = true logFile = /var/log/polipo/polipo.log proxyAddress = &amp;#34;0.0.0.0&amp;#34; socksParentProxy = &amp;#34;127.0.0.1:1080&amp;#34; socksProxyType = socks5 proxyPort = 8123 chunkHighMark = 50331648 objectHighMark = 16384 serverMaxSlots = 64 serverSlots = 16 serverSlots1 = 32 genpac</description>
    </item>
    
    <item>
      <title>chromedriver添加代理</title>
      <link>https://alonsovau.github.io/2018/07/chromedriver%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%90%86/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/chromedriver%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%90%86/</guid>
      <description>from selenium import webdriver from selenium.webdriver.chrome.options import Options chrome_options = Options() chrome_options.add_argument(&amp;#34;--headless&amp;#34;) chrome_options.add_argument(&amp;#34;--no-sandbox&amp;#34;) chrome_options.add_argument(&amp;#34;--proxy-server=socks5://127.0.0.1:1080&amp;#34;) driver = webdriver.Chrome(executable_path=&amp;#39;/opt/chromedriver&amp;#39;, chrome_options=chrome_options) driver.</description>
    </item>
    
    <item>
      <title>Linux swap配置</title>
      <link>https://alonsovau.github.io/2018/07/linux-swap%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/linux-swap%E9%85%8D%E7%BD%AE/</guid>
      <description>#查看swap比率 cat /proc/sys/vm/swappiness # open /etc/sysctl.conf as root. Then, change or add this line to the file vm.swappiness = 10 # Reboot for the change to take effect. # You can also change the value while your system is still running with sysctl vm.swappiness=10 # You can also clear your swap by running swapoff -a and then swapon -a as root instead of rebooting to achieve the same effect. swapoff -a swapon -a</description>
    </item>
    
    <item>
      <title>配置多个GIT</title>
      <link>https://alonsovau.github.io/2018/07/%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgit/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgit/</guid>
      <description> .ssh文件夹下建立config文件：
# 84 Host 172.28.10.84 HostName 172.28.10.84 PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_84 执行ssh-agent让ssh识别新的私钥
ssh-add ~/.ssh/id_rsa_84 该命令如果报错：Could not open a connection to your authentication agent.无法连接到ssh agent，可执行ssh-agent bash命令后再执行ssh-add命令  </description>
    </item>
    
    <item>
      <title>Linux下创建虚拟环境</title>
      <link>https://alonsovau.github.io/2018/06/linux%E4%B8%8B%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/06/linux%E4%B8%8B%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>pip install virtualenv virtualenv py3env #可选择使用哪个python source bin/activate deactivate</description>
    </item>
    
    <item>
      <title>Linux下安装python3</title>
      <link>https://alonsovau.github.io/2018/06/linux%E4%B8%8B%E5%AE%89%E8%A3%85python3/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/06/linux%E4%B8%8B%E5%AE%89%E8%A3%85python3/</guid>
      <description>export LANG=zh_CN.UTF-8
export LANGUAGE=zh_CN.UTF-8
make之前需要检查openssl-devel</description>
    </item>
    
    <item>
      <title>Oracle表空间、段、区和块简述</title>
      <link>https://alonsovau.github.io/2018/06/oracle%E8%A1%A8%E7%A9%BA%E9%97%B4%E6%AE%B5%E5%8C%BA%E5%92%8C%E5%9D%97%E7%AE%80%E8%BF%B0/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/06/oracle%E8%A1%A8%E7%A9%BA%E9%97%B4%E6%AE%B5%E5%8C%BA%E5%92%8C%E5%9D%97%E7%AE%80%E8%BF%B0/</guid>
      <description>l Oracle表空间、段、区和块简述</description>
    </item>
    
    <item>
      <title>文件及Terminal终端编码</title>
      <link>https://alonsovau.github.io/2018/06/%E6%96%87%E4%BB%B6%E5%8F%8Aterminal%E7%BB%88%E7%AB%AF%E7%BC%96%E7%A0%81/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/06/%E6%96%87%E4%BB%B6%E5%8F%8Aterminal%E7%BB%88%E7%AB%AF%E7%BC%96%E7%A0%81/</guid>
      <description>1. set fileencoding 查看文件编码 2. set fileencdding=utf-8 设置文件编码 按wq保存 3. :e ++enc=cp936 # vim打开文档后，encoding=utf-8（locale决定的），fileencoding=latin1（自动编码判断机制不准导致的），termencoding=空（默认无需转换term编码），显示文件为乱码</description>
    </item>
    
    <item>
      <title>Mysql5.7 Linux安装</title>
      <link>https://alonsovau.github.io/2018/05/mysql5.7-linux%E5%AE%89%E8%A3%85/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/05/mysql5.7-linux%E5%AE%89%E8%A3%85/</guid>
      <description>rpm -ivh mysql-community-common-5.7.22-1.el7.x86_64.rpm mysql-community-libs-5.7.22-1.el7.x86_64.rpm rpm -ivh mysql-community-client-5.7.22-1.el7.x86_64.rpm mysql-community-server-5.7.22-1.el7.x86_64.rpm mysqld --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data/ --initialize service mysqld start grep &amp;#39;temporary password&amp;#39; /var/log/mysqld.log mysql -uroot -p ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;cffEx2016!&amp;#39;; GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;cffEx2016!&amp;#39; WITH GRANT OPTION; 拷贝my.cnf到/etc/目录下 my.cnf 权限为-rw-r--r-- 重启mysql</description>
    </item>
    
    <item>
      <title>MySQL&#43;Keepalived高可用</title>
      <link>https://alonsovau.github.io/2018/04/mysql-keepalived%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/04/mysql-keepalived%E9%AB%98%E5%8F%AF%E7%94%A8/</guid>
      <description>一、结构  简介：
系统主要通过Keepalived+MySQL双主来实现MySQL-HA，我们必须保证两台MySQL数据库的数据完全一样，基本设计是两台MySQL互为主从关系，通过Keepalived配置虚拟IP，实现当其中的一台MySQL数据库宕机后，应用能够自动切换到另外一台MySQL数据库，保证系统的高可用。
 拓扑环境：
 OS: Red Hat Enterprise Linux Server release 7.1 (Maipo)
 MySQL version: 5.5.59-log MySQL Community Server (GPL)
 Keepalived version: keepalived-1.3.5-1.el7.x86_64
 MySQL-Vip: 172.28.10.100
 MySQL-Master1: 172.28.10.82
 MySQL-Master2: 172.28.10.83
  结构图：
  二、 MySQL环境部署  修改MySQL配置文件
以下为master1数据库的my.cnf配置文件内容，目录为/etc/my.cnf，配置完成后重启数据库
[client] port = 3382 socket = /var/lib/mysql/mysql.sock [mysqld] port = 3382 socket = /var/lib/mysql/mysql.sock skip-external-locking key_buffer_size = 16M max_allowed_packet = 1M table_open_cache = 64 sort_buffer_size = 512K net_buffer_length = 8K read_buffer_size = 256K read_rnd_buffer_size = 512K myisam_sort_buffer_size = 8M log-bin=mysql-bin binlog_format=mixed # master2的server-id改为2 server-id = 1 # 要产生log的数据库 binlog-do-db=pms_db # 不产生log的数据库 binlog-ignore-db=mysql # 要复制的数据库 replicate-do-db=pms_db # 不复制的数据库 replicate-ignore-db=mysql log-bin=mysql-bin innodb_data_home_dir = /var/lib/mysql innodb_data_file_path = ibdata1:10M:autoextend innodb_log_group_home_dir = /var/lib/mysql innodb_buffer_pool_size = 16M innodb_additional_mem_pool_size = 2M innodb_log_file_size = 5M innodb_log_buffer_size = 8M innodb_flush_log_at_trx_commit = 1 innodb_lock_wait_timeout = 50 [mysqldump] quick max_allowed_packet = 16M [mysql] no-auto-rehash [myisamchk] key_buffer_size = 20M sort_buffer_size = 20M read_buffer = 2M write_buffer = 2M [mysqlhotcopy] interactive-timeout 将master1设置为master2的主服务器</description>
    </item>
    
    <item>
      <title>网络相关</title>
      <link>https://alonsovau.github.io/2018/04/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/04/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/</guid>
      <description>arp -a 搜索同一网段机器 iptables -L -n -v 查看已添加的iptables规则 清空日志文件： cat /dev/null&amp;gt;/var/log/messages</description>
    </item>
    
    <item>
      <title>cluster</title>
      <link>https://alonsovau.github.io/2018/04/cluster/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/04/cluster/</guid>
      <description>https://www.linuxidc.com/Linux/2016-07/133234.htm
 sestatus
 防火墙
   接下来就可以针对这个目录通过一些命令查看配置文件在哪了，如下
/usr/bin/mysql &amp;ndash;verbose &amp;ndash;help | grep -A 1 &amp;lsquo;Default options&amp;rsquo;</description>
    </item>
    
    <item>
      <title>cdll windll oledll</title>
      <link>https://alonsovau.github.io/2018/03/cdll-windll-oledll/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/03/cdll-windll-oledll/</guid>
      <description>cdll
windll
oledll
它们的不同之处在于：动态链接库中的函数所遵守的函数调用方式（calling convention）以及返回方式有所不同。
cdll用于加载遵循cdecl调用约定的动态链接库，windll用于加载遵循stdcall调用约定的动态链接库，oledll与windll完全相同，只是会默认其载入的函数统一返回一个Windows HRESULT错误编码。</description>
    </item>
    
    <item>
      <title>Decode HTML entities</title>
      <link>https://alonsovau.github.io/2018/02/decode-html-entities/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/decode-html-entities/</guid>
      <description>Python3.4+ import html print(html.unescape(&amp;#39;&amp;amp;pound;682m&amp;#39;)) Python2.6-3.3 from html.parser import HTMLParser h = HTMLParser() print(h.unescape(&amp;#39;&amp;amp;pound;682m&amp;#39;)) link</description>
    </item>
    
    <item>
      <title>Python3自定义排序</title>
      <link>https://alonsovau.github.io/2018/02/python3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/python3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</guid>
      <description>1. 笨方法，不推荐 a = [&amp;#39;星期一&amp;#39;, &amp;#39;星期三&amp;#39;, &amp;#39;星期二&amp;#39;, &amp;#39;星期日&amp;#39;] c = {&amp;#39;星期一&amp;#39;: 1, &amp;#39;星期二&amp;#39;: 2, &amp;#39;星期三&amp;#39;: 3, &amp;#39;星期四&amp;#39;: 4, &amp;#39;星期五&amp;#39;: 5, &amp;#39;星期六&amp;#39;: 6, &amp;#39;星期日&amp;#39;: 7} b = {} for i in a: b[i] = c[i] b = sorted(b.items(), key=lambda t: t[1]) # b = sorted(zip(b.values(), b.keys())) # 使用zip下面改为j[1] a = [] for j in b: day = j[0] a.append(day) print(a) 2. 自定义大小关系  python3中取消comparison function，使用key function，cmp_to_key帮助cmp过渡为key
 def compare_day(day1, day2): c = {&amp;#39;星期一&amp;#39;: 1, &amp;#39;星期二&amp;#39;: 2, &amp;#39;星期三&amp;#39;: 3, &amp;#39;星期四&amp;#39;: 4, &amp;#39;星期五&amp;#39;: 5, &amp;#39;星期六&amp;#39;: 6, &amp;#39;星期日&amp;#39;: 7} value1 = c[day1] value2 = c[day2] if value1 &amp;gt; value2: return 1 if value1 &amp;lt; value2: return -1 return 0 a = [&amp;#39;星期一&amp;#39;, &amp;#39;星期三&amp;#39;, &amp;#39;星期二&amp;#39;, &amp;#39;星期日&amp;#39;] from functools import cmp_to_key a.</description>
    </item>
    
    <item>
      <title>XML解析</title>
      <link>https://alonsovau.github.io/2018/02/xml%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/xml%E8%A7%A3%E6%9E%90/</guid>
      <description>XML # document.xml为docx文件中的 from xml.etree.ElementTree import parse from xml.etree.ElementTree import XMLParser f = open(&amp;#39;document.xml&amp;#39;) doc = parse(f, XMLParser(encoding=&amp;#34;utf-8&amp;#34;)) # 1 t_elems = doc.findall(&amp;#39;.//{http://schemas.openxmlformats.org/wordprocessingml/2006/main}t&amp;#39;) # 2 ns = {&amp;#39;w&amp;#39;: &amp;#39;http://schemas.openxmlformats.org/wordprocessingml/2006/main&amp;#39;} t_elems = doc.findall(&amp;#39;.//w:t&amp;#39;, ns) # 3 t_elems = doc.iter(&amp;#39;{http://schemas.openxmlformats.org/wordprocessingml/2006/main}t&amp;#39;) for elem in t_elems: print(elem.text) LXML from lxml import etree f = open(&amp;#39;document.xml&amp;#39;) doc_lxml = etree.parse(f, etree.XMLParser(encoding=&amp;#34;utf-8&amp;#34;)) # 1 p_lxml = doc_lxml.iter(&amp;#39;{http://schemas.openxmlformats.org/wordprocessingml/2006/main}t&amp;#39;) # 2 ns = {&amp;#39;w&amp;#39;: &amp;#39;http://schemas.openxmlformats.org/wordprocessingml/2006/main&amp;#39;} find_results = doc_lxml.findall(&amp;#39;//w:t&amp;#39;, ns) # Namespace prefix-&amp;gt;URI mapping known in the context of this Element.</description>
    </item>
    
    <item>
      <title>crontab</title>
      <link>https://alonsovau.github.io/2018/02/crontab/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/crontab/</guid>
      <description> 1. 用法： 1.cat /etc/crontab 系统级 2./etc/cron.deny 所列用户不允许使用 3./etc/cron.allow 所列用户允许使用 4./var/spool/cron/ 下存储以用户名存储的文件 5.minute hour day month week command 6.crontab [-u user] -l 显示当前用户任务 7.crontab -l &amp;gt; z 备份当前用户的任务到z文件 8.crontab [-u user] -e 编辑当前用户的任务 9.crontab [-u user] -r 删除 10.crontab &amp;lt;filename&amp;gt; 从文件恢复 11.service crond start/stop/restart/reload 2. 例子： * * * * * command 每分钟执行 3,15 * * * * command 每小时第3，15分钟执行 3,15 8-11 */2 * * command 每2天的8-11点的第3，15分钟执行 30 21 * * 0,6 command 每周日、周六21:30分执行 * */2 * * * command 每2小时执行</description>
    </item>
    
    <item>
      <title>dbf读写</title>
      <link>https://alonsovau.github.io/2018/02/dbf%E8%AF%BB%E5%86%99/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/dbf%E8%AF%BB%E5%86%99/</guid>
      <description> 新建一个dbf并写入数据
import dbf table = dbf.Table(&amp;#39;temptable&amp;#39;, &amp;#39;name C(30); age N(3,0); birth D&amp;#39;) print(table.field_names) table.open() for datum in ((&amp;#39;John Doe&amp;#39;, 31, dbf.Date(1979, 9, 13)), (&amp;#39;Ethan Furman&amp;#39;, 102, dbf.Date(1909, 4, 1)), (&amp;#39;Jane Smith&amp;#39;, 57, dbf.Date(1954, 7, 2)), (&amp;#39;John Adams&amp;#39;, 44, dbf.Date(1967, 1, 9)),): table.append(datum) for record in table: print(record) table.close() 读取一个dbf并写入数据
table = dbf.Table(&amp;#39;1.DBF&amp;#39;) print(table.field_names) table.open() for data in ((&amp;#39;1000&amp;#39;, &amp;#39;10000001&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;1&amp;#39;), ): table.append(data) table.close()  </description>
    </item>
    
    <item>
      <title>git常用命令</title>
      <link>https://alonsovau.github.io/2018/02/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>git config --global user.name &amp;#34;Alonsovau&amp;#34; git config --global user.email &amp;#34;alonsovau@outlook.com&amp;#34; mkdir learngit pwd 查看完整路径 git init git add readme.txt git commit -m &amp;#34;wrote a readme file&amp;#34; git status git diff readme.txt git log git log --pretty=oneline git reset --hard HEAD^ 退回上一个版本 HEAD^^上上个版本 git reset --hard 4f1be52c 到指定的某个版本 git log得到的commit id的部分即可 git reflog 用来记录你的每一次命令 git checkout -- readme.txt 丢弃工作区修改 --后面要加空格 不然爆炸 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout &amp;ndash; file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库
rm test.</description>
    </item>
    
    <item>
      <title>lxml</title>
      <link>https://alonsovau.github.io/2018/02/lxml/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/lxml/</guid>
      <description>from lxml import etree html = etree.HTML(resHtml, parser=etree.HTMLParser(encoding=&amp;#39;utf-8&amp;#39;)) # 处理源文件的时候，由于没有指定编码，所以它使用了一个默认编码，从而导致和UTF-8冲突，产生乱码 # http://lxml.</description>
    </item>
    
    <item>
      <title>sed</title>
      <link>https://alonsovau.github.io/2018/02/sed/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/sed/</guid>
      <description>语法 sed [-hnV][-e&amp;lt;script&amp;gt;][-f&amp;lt;script文件&amp;gt;][文本文件] 参数 -e&amp;lt;script&amp;gt;或--expression=&amp;lt;script&amp;gt; 以选项中指定的script来处理输入的文本文件 -f&amp;lt;script文件&amp;gt;或--file=&amp;lt;script文件&amp;gt; 以选项中指定的script文件来处理输入的文本文件 -h或--help 显示帮助 -n或--quiet或--silent 仅显示script处理后的结果 -V或--version 显示版本信息 动作  a: 新增，在匹配的下一行新增一行
 i: 插入，转匹配的上一行新增一行
 c: 取代，c后面是将替换的值
 d: 删除，删除指定行
 p: 打印，通常与sed -n一起使用
 s: 取代，进行搜索
  例子  sed -e 4a\zx zx.txt：在第四行后面加zx，输出到标准输出，macOS语法错误
 nl zx.txt |sed &amp;lsquo;2,5d&amp;rsquo;：列出内容并列出行号，同时删除2-5行
 nl zx.txt |sed &amp;lsquo;2,$d&amp;rsquo;：删除2到最后一行
 nl zx.txt |sed &amp;lsquo;2a zx&amp;rsquo;：第二行后增加zx，行前使用2i,macOS不可
 nl zx.txt |sed &amp;lsquo;2a zx\按enter键xz&amp;rsquo;：第二行后加zx，xz2行数据，macOS不可
 nl zx.txt |sed &amp;lsquo;2,3c kol&amp;rsquo;：2到3行替换为kol</description>
    </item>
    
    <item>
      <title>sqlplus的多种连接方式</title>
      <link>https://alonsovau.github.io/2018/02/sqlplus%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/sqlplus%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/</guid>
      <description> sqlplus / as sysdba
 操作系统认证，不需要数据库服务器启动listener，也不需要数据库服务器处于可用状态。比如我们想要启动数据库就可以用这种方式进入
 sqlplus username/password
 连接本机数据库，不需要数据库服务器的listener进程，但是由于需要用户名密码的认证，因此需要数据库服务器处于可用状态才行
 sqlplus username/password@orcl
 通过网络连接，这是需要数据库服务器的listener处于监听状态。此时建立一个连接的大致步骤如下
 a. 查询sqlnet.ora，看看名称的解析方式，默认是TNSNAME；
b. 查询tnsnames.ora文件，从里边找orcl的记录，并且找到数据库服务器的主机名或者IP，端口和service_name；
c. 如果服务器listener进程没有问题的话，建立与listener进程的连接；
d. 根据不同的服务器模式如专用服务器模式或者共享服务器模式，listener采取接下去的动作。默认是专用服务器模式，没有问题的话客户端就连接上了数据库的server process。
 sqlplus username/password@//host:port/sid
 sqlplus system/oracle@//192.168.130.99:1521/orabiz
  </description>
    </item>
    
    <item>
      <title>undefined symbol PyUnicodeUCS2_FromUnicode</title>
      <link>https://alonsovau.github.io/2018/02/undefined-symbol-pyunicodeucs2_fromunicode/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/undefined-symbol-pyunicodeucs2_fromunicode/</guid>
      <description>import sys print(sys.maxunicode) # 大于65535为UCS4，否则为UCS2  python2.6.6 &amp;ndash; 1114111
 python2.7.10 &amp;ndash; 65535
 python2.7.13 &amp;ndash; 65535
 python3.5.2 &amp;ndash; 1114111
 UCS4为使用4字节Unicode编译扩展模块，UCS2为2字节Unicode，解决方法是使用对应的python版本编译
  </description>
    </item>
    
    <item>
      <title>使用class object的指针</title>
      <link>https://alonsovau.github.io/2018/02/%E4%BD%BF%E7%94%A8class-object%E7%9A%84%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/%E4%BD%BF%E7%94%A8class-object%E7%9A%84%E6%8C%87%E9%92%88/</guid>
      <description>使用class object的指针略有不同，这是因为class object链接到一组我们可以调用(invoke)的操作行为(operations)，举例来说检查fibnacci vector的第二个元素是否为1，我们可能会这么写：
if (!fibonacci.empty() &amp;amp;&amp;amp; (fibonacci[1] == 1))  上例中的fibonacci和empty()两字之间的逗号，称为dot成员选择运算符(member selection operator)，用来选择想要施行的操作，如果要通过指针来指针来选择操作行为，必须改用arrow成员选择运算符：
由于指针可能未指向任何对象，所以先校验pv是否为非零值
if (pv &amp;amp;&amp;amp; pv-&amp;gt;empty() &amp;amp;&amp;amp; ((*pv)[1] == 1)) </description>
    </item>
    
    <item>
      <title>函数默认值设置</title>
      <link>https://alonsovau.github.io/2018/02/%E5%87%BD%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/%E5%87%BD%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC%E8%AE%BE%E7%BD%AE/</guid>
      <description> h #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; using namespace std; void display(const vector&amp;lt;int&amp;gt;&amp;amp;, ostream&amp;amp; = cout);  cpp #include &amp;#34;NumericSeq.h&amp;#34; void display(const vector&amp;lt;int&amp;gt; &amp;amp;vec, ostream &amp;amp;os){ for (int ix = 0; ix &amp;lt; vec.size(); ix++){ os &amp;lt;&amp;lt; vec[ix] &amp;lt;&amp;lt; &amp;#39; &amp;#39;; } os &amp;lt;&amp;lt; endl; }    默认值resolve由最右边进行，如果为某个参数提供了默认值，那么这个参数右侧所有参数必须有默认值
 默认值只能指定一次，可以在声明处，可以在函数定义处，由于头文件为函数带来更高的可见度，所以置于函数声明处 (出自Essential C++)
   </description>
    </item>
    
    <item>
      <title>查看机器重启时间</title>
      <link>https://alonsovau.github.io/2018/02/%E6%9F%A5%E7%9C%8B%E6%9C%BA%E5%99%A8%E9%87%8D%E5%90%AF%E6%97%B6%E9%97%B4/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/%E6%9F%A5%E7%9C%8B%E6%9C%BA%E5%99%A8%E9%87%8D%E5%90%AF%E6%97%B6%E9%97%B4/</guid>
      <description>who -b 上次启动时间 last reboot 系统启动记录 last reboot |head -1 最后一次启动时间 w 可查看系统已经运行时间 top 也可查看</description>
    </item>
    
    <item>
      <title>blob字段插入实例</title>
      <link>https://alonsovau.github.io/2017/10/blob%E5%AD%97%E6%AE%B5%E6%8F%92%E5%85%A5%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/10/blob%E5%AD%97%E6%AE%B5%E6%8F%92%E5%85%A5%E5%AE%9E%E4%BE%8B/</guid>
      <description>blob字段插入实例
create table blob_table( id number primary key, blob_cl blob not null ); insert into blob_table values(1,to_blob(&amp;#39;11111000011111&amp;#39;)); commit; select * from blob_table; update blob_table set blob_cl=to_blob(&amp;#39;110010000110011&amp;#39;) where id=1; delete from blob_table where id=1; commit;</description>
    </item>
    
    <item>
      <title>设置NlS_LANG</title>
      <link>https://alonsovau.github.io/2017/10/%E8%AE%BE%E7%BD%AEnls_lang/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/10/%E8%AE%BE%E7%BD%AEnls_lang/</guid>
      <description>linux:
export NLS_LANG=&amp;#34;SIMPLIFIED CHINESE_CHINA&amp;#34;.</description>
    </item>
    
    <item>
      <title>输出重定向到文件</title>
      <link>https://alonsovau.github.io/2017/10/%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/10/%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6/</guid>
      <description>ls &amp;gt; log.log ls &amp;gt;&amp;gt; log.log --不覆盖log.log，追加 cat 1.txt 2&amp;gt; log.log --错误输出到log.log cat 1.txt &amp;gt; log.log 2&amp;gt;&amp;amp;1 --stderr也输出到stdout stdin 0 &amp;lt; stdout 1 1&amp;gt; stderr 2 2&amp;gt;</description>
    </item>
    
    <item>
      <title>Install Using Source from PyPI</title>
      <link>https://alonsovau.github.io/2017/09/install-using-source-from-pypi/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/09/install-using-source-from-pypi/</guid>
      <description>python setup.py build
python setup.py install</description>
    </item>
    
    <item>
      <title>Linux下安装python</title>
      <link>https://alonsovau.github.io/2017/09/linux%E4%B8%8B%E5%AE%89%E8%A3%85python/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/09/linux%E4%B8%8B%E5%AE%89%E8%A3%85python/</guid>
      <description> 下载tgz包
 tar -zxvf python-x.x.x.tgz
 cd Python-x.x.x
 ./configure
 make
 make install
 cd /usr/bin
 rm -rf python
 ln -s /usr/local/bin/python2.7 ./python
  </description>
    </item>
    
    <item>
      <title>logging</title>
      <link>https://alonsovau.github.io/2017/09/logging/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/09/logging/</guid>
      <description>Logging Cookbook</description>
    </item>
    
    <item>
      <title>浏览器支持列表</title>
      <link>https://alonsovau.github.io/2017/09/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81%E5%88%97%E8%A1%A8/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/09/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81%E5%88%97%E8%A1%A8/</guid>
      <description>浏览器支持文档</description>
    </item>
    
    <item>
      <title>同时安装了python2和3</title>
      <link>https://alonsovau.github.io/2017/08/%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%E4%BA%86python2%E5%92%8C3/</link>
      <pubDate>Wed, 30 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/08/%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%E4%BA%86python2%E5%92%8C3/</guid>
      <description> py -2 hello.py (Windows)
 py -3 hello.py (Windows)
 文件开头加入:
 #! python2
#! python3
 pip
py -2 -m pip install xxx py -3 -m pip install xxx mac:
#!/usr/bin/env python3  </description>
    </item>
    
    <item>
      <title>xa0、u3000</title>
      <link>https://alonsovau.github.io/2017/08/xa0u3000/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/08/xa0u3000/</guid>
      <description> \xa0是不间断空白符(&amp;amp;nbsp)
 我们通常所用的空格是 \x20 ，是在标准ASCII可见字符 0x20~0x7e 范围内。而 \xa0 属于 latin1 （ISO/IEC_8859-1）中的扩展字符集字符，代表空白符nbsp(non-breaking space)。latin1 字符集向下兼容 ASCII （ 0x20~0x7e ）。通常我们见到的字符多数是 latin1 的，比如在 MySQL 数据库中。
 \u3000是全角的空白符
 根据Unicode编码标准及其基本多语言面的定义， \u3000 属于CJK字符的CJK标点符号区块内，是空白字符之一。它的名字是 Ideographic Space ，有人译作表意字空格、象形字空格等。顾名思义，就是全角的 CJK 空格。它跟 nbsp 不一样，是可以被换行间断的。常用于制造缩进， wiki 还说用于抬头，但没见过。
  </description>
    </item>
    
    <item>
      <title>安装BeautifulSoup库导入失败</title>
      <link>https://alonsovau.github.io/2017/08/%E5%AE%89%E8%A3%85beautifulsoup%E5%BA%93%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/08/%E5%AE%89%E8%A3%85beautifulsoup%E5%BA%93%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5/</guid>
      <description>import BeautifulSoup # 报错，找不到模块 # 命令行进入python，使用help(&amp;#39;modules&amp;#39;)，发现名字为bs4</description>
    </item>
    
    <item>
      <title>类似问号表达式</title>
      <link>https://alonsovau.github.io/2017/08/%E7%B1%BB%E4%BC%BC%E9%97%AE%E5%8F%B7%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/08/%E7%B1%BB%E4%BC%BC%E9%97%AE%E5%8F%B7%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>expression and truevalue or falsevalue
a = reduce(lambda x, y: x &amp;gt; y and x or y, [9, 7, 9, 8, 100])</description>
    </item>
    
    <item>
      <title>failed with error code 1</title>
      <link>https://alonsovau.github.io/2017/08/failed-with-error-code-1/</link>
      <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/08/failed-with-error-code-1/</guid>
      <description>command &amp;ldquo;python setup.py egg_info&amp;rdquo; failed with error code 1 in &amp;hellip;
解决方法：
pip install distribute</description>
    </item>
    
    <item>
      <title>root账户远程登录</title>
      <link>https://alonsovau.github.io/2017/08/root%E8%B4%A6%E6%88%B7%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/08/root%E8%B4%A6%E6%88%B7%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</guid>
      <description> 关闭windows防火墙或者在入站规则添加3306端口
 执行
GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;root&amp;#39; WITH GRANT OPTION; 修改root@%此用户的密码
  </description>
    </item>
    
    <item>
      <title>命令行安装mysql</title>
      <link>https://alonsovau.github.io/2017/08/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%89%E8%A3%85mysql/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/08/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%89%E8%A3%85mysql/</guid>
      <description> C:\Program Files\mysql目录下新建my.ini
[mysql] default-character-set=utf8 [mysqld] sql_mode=&amp;#39;NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES&amp;#39; port = 3306 basedir=C:\Program Files\mysql datadir=C:\Program Files\mysql\data max_connections=200 character-set-server=utf8 default-storage-engine=INNODB 进入C:\Program Files\mysql\bin
 执行mysqld &amp;ndash;initialize-insecure （不设置root密码，建议使用）
 执行mysqld -install
 执行net start mysql
 执行mysql -u root -p，回车不输入密码即可进入
 update mysql.user set authentication_string=PASSWORD(&amp;lsquo;wasd123&amp;rsquo;) whereUser=&amp;lsquo;root&amp;rsquo;;
 卸载：net stop mysql,执行mysqld &amp;ndash;remove,删除data文件夹
  </description>
    </item>
    
    <item>
      <title>搭建pycharm激活服务器</title>
      <link>https://alonsovau.github.io/2017/06/%E6%90%AD%E5%BB%BApycharm%E6%BF%80%E6%B4%BB%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/06/%E6%90%AD%E5%BB%BApycharm%E6%BF%80%E6%B4%BB%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description> chmod +x intelserver
 nohup ./intelserver -p 1666 -u zx &amp;gt;zx.out 2&amp;gt;&amp;amp;1 &amp;amp;
  </description>
    </item>
    
    <item>
      <title>杂项</title>
      <link>https://alonsovau.github.io/2017/06/%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/06/%E6%9D%82%E9%A1%B9/</guid>
      <description>enumerate将其组成一个索引序列，利用它可以同时获得索引和值
for lineno, line in enumerate(self.lines, 1):  迭代器切片
for x in itertools.islice(c, 10, 20): 跳过可迭代对象的开始部分
for line in dropwhile(lambda l: l.startswith(&amp;#39;#&amp;#39;), f): 跳过所有#开头字符串
lines = (line for line in f if not line.startswith(&amp;#39;#&amp;#39;)) 排列迭代
for p in permutations(items, 2): 组合迭代
for c in combinations(items, 2): for c in combinations_with_replacement(items, 2): 同时迭代多个序列
for xv, yv in zip(x, y): 迭代多个序列,短的序列补0
for xv, yv in zip_longest(x, y, fillvalue=0): 不同集合上元素的迭代
for x in chain(a, b): 按顺序迭代已排序序列</description>
    </item>
    
    <item>
      <title>杂项</title>
      <link>https://alonsovau.github.io/2017/05/%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/05/%E6%9D%82%E9%A1%B9/</guid>
      <description>select text from all_source where type=&amp;lsquo;TRIGGER&amp;rsquo; AND name=&amp;lsquo;TR_XXX&amp;rsquo;;
 关键字：  :NEW 和:OLD使用方法和意义，new 只出现在insert和update时，old只出现在update和delete时。在insert时new表示新插入的行数据，update时new表示要替换的新数据、old表示要被更改的原来的数据行，delete时old表示要被删除的数据。
ORA-08002: 序列 sequence226 尚未在此会话中定义创建Sequence后直接查询它的当前值（CURRVAL）会出错，要先调用Sequence对象.NEXTVAL，才能查询当前值</description>
    </item>
    
    <item>
      <title>referential integrity constraint(引用完整性约束)</title>
      <link>https://alonsovau.github.io/2017/04/referential-integrity-constraint%E5%BC%95%E7%94%A8%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/04/referential-integrity-constraint%E5%BC%95%E7%94%A8%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F/</guid>
      <description>实体数据模型 (EDM) 中的“引用完整性约束”与关系数据库中的引用完整性约束类似。 与数据库表中的一个（或多个）列可以引用另一个表的主键相同，实体类型的一个（或多个）属性可以引用另一个实体类型的实体键。 所引用的实体类型称为约束的主体端。 引用主体端的实体类型称为约束的依赖端。
引用完整性约束定义为两个实体类型间的关联的一部分。引用完整性约束的定义指定了以下信息：
 约束的主体端。 （一个实体类型，其实体键由依赖端引用。）
 主体端的实体键。
 约束的依赖端。 （一个实体类型，它的一个或多个属性引用主体端的实体键。）
 依赖端的一个或多个引用属性。
  </description>
    </item>
    
    <item>
      <title>sqlldr(sql loader)</title>
      <link>https://alonsovau.github.io/2017/04/sqlldrsql-loader/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/04/sqlldrsql-loader/</guid>
      <description>sqlldr userid=system/oracle@172.31.198.121/orabiz control=d:\student.ctl log=d:\log\student.log bad=d:\bad\student.bad skip=1  control&amp;ndash;控制文件名
 log&amp;ndash;日志文件名
 bad&amp;ndash;错误文件名
 discard&amp;ndash;废弃文件名
 discardmax&amp;ndash;允许废弃的文件的数目
 skip&amp;ndash;要跳过的逻辑记录的数目（默认0）
 load&amp;ndash;要加载的逻辑记录的数目（默认全部）
 errors&amp;ndash;允许的错误的数目
 rows&amp;ndash;常规路径绑定数组中或直接路径保存数据间的行数 (默认:常规路径 64, 所有直接路径)
 bindsize&amp;ndash;常规路径绑定数组的大小，以字节计，默认256000
 silent&amp;ndash; 运行过程中隐藏消息 (标题,反馈,错误,废弃,分区)
 direct&amp;ndash; 使用直接路径 (默认 FALSE)
 parfile&amp;ndash; 参数文件: 包含参数说明的文件的名称
 parallel&amp;ndash; 执行并行加载 (默认 FALSE)
 file&amp;ndash; 要从以下对象中分配区的文件
 skip_unusable_indexes&amp;ndash; 不允许/允许使用无用的索引或索引分区 (默认 FALSE)
 skip_index_maintenance&amp;ndash; 没有维护索引, 将受到影响的索引标记为无用 (默认 FALSE)
 commit_discontinued&amp;ndash; 提交加载中断时已加载的行(默认 FALSE)
 readsize&amp;ndash; 读取缓冲区的大小(默认 1048576)
 external_table&amp;ndash; 使用外部表进行加载; NOT_USED, GENERATE_ONLY, EXECUTE (默认 NOT_USED)</description>
    </item>
    
    <item>
      <title>HWM</title>
      <link>https://alonsovau.github.io/2017/04/hwm/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/04/hwm/</guid>
      <description>HWM(High Water Mark)</description>
    </item>
    
    <item>
      <title>truncate,delete,drop</title>
      <link>https://alonsovau.github.io/2017/04/truncatedeletedrop/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/04/truncatedeletedrop/</guid>
      <description> 总体  delete：DML语言、可以回退、可以有条件的删除
 truncate：DDL语言、无法回退、默认所有的表内容都删除、删除速度比delete快、表结构及其列、约束、索引等均保持不变、truncate不记录在日志中，所以不能激活触发器。
 drop：DDL语言、操作立即生效,原数据不放到rollback segment中,不能回滚. 操作不触发trigger
  对比  DELETE语句每删除一行，都在事务日志中为所删除的每行记录一项；TRUNCATE TABLE通过释放存储表数据所用的数据页来删除数据，并且只事务日志中记录页的释放。
 对于由 FOREIGN KEY 约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带 Where 子句的 Delete 语句。由于 TRUNCATE TABLE 不记录在日志中，所以它不能激活触发器。
 TRUNCATE TABLE 不能用于参与了索引视图的表。
 truncate和 delete只删除数据不删除表的结构(定义)，drop语句将删除表的结构被依赖的约束(constrain),触发器(trigger),索引(index);依赖于该表的存储过程/函数将保留,但是变为invalid状态.
 delete语句是dml,这个操作会放到rollback segement中,事务提交之后才生效;如果有相应的trigger,执行的时候将被触发. truncate,drop是ddl, 操作立即生效,原数据不放到rollback segment中,不能回滚. 操作不触发trigger.
 delete语句不影响表所占用的extent, 高水线(high water mark)保持原位置不动，显然drop语句将表所占用的空间全部释放，truncate语句缺省情况下将空间释放到minextents个extent,除非使用reuse storage;truncate会将高水线复位(回到最开始).
 速度,一般来说: drop&amp;gt; truncate &amp;gt; delete
 安全性:小心使用drop 和truncate,尤其没有备份的时候.否则哭都来不及
  </description>
    </item>
    
    <item>
      <title>ubuntu server通过vnc连接(xrdp亦可)</title>
      <link>https://alonsovau.github.io/2017/04/ubuntu-server%E9%80%9A%E8%BF%87vnc%E8%BF%9E%E6%8E%A5xrdp%E4%BA%A6%E5%8F%AF/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/04/ubuntu-server%E9%80%9A%E8%BF%87vnc%E8%BF%9E%E6%8E%A5xrdp%E4%BA%A6%E5%8F%AF/</guid>
      <description>1.安装
apt-get install vnc4server 2.设置密码
vncpasswd 或者
vncserver 创建一个
3.启动vnc
vncserver:1 4.启动vnc客户端
输入IP地址加:1,例如192.168.1.104:1
5.配置文件
进入/root/.vnc
vi xstartup #!/bin/sh  # Uncomment the following two lines for normal desktop: # unset SESSION_MANAGER # exec /etc/X11/xinit/xinitrc [ -x /etc/vnc/xstartup ] &amp;amp;&amp;amp; exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources xsetroot -solid grey vncconfig -iconic &amp;amp; #x-terminal-emulator -geometry 80x24+10+10 -ls -title &amp;#34;$VNCDESKTOP Desktop&amp;#34; &amp;amp; #x-window-manager &amp;amp; sesion-manager &amp;amp; xfdesktop &amp;amp; xfce4-panel &amp;amp; xfce4-menu-plugin &amp;amp; xfsettingsd &amp;amp; xfconfd &amp;amp; xfwm4 &amp;amp;  6.</description>
    </item>
    
    <item>
      <title>EUID、SUID、RUID、</title>
      <link>https://alonsovau.github.io/2017/03/euidsuidruid/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/03/euidsuidruid/</guid>
      <description>有效用户ID（Effective UID，即EUID）与有效用户组ID（Effective Group ID，即EGID）在创建与访问文件的时候发挥作用；具体来说，创建文件时，系统内核将根据创建文件的进程的EUID与EGID设定文件的所有者/组属性，而在访问文件时，内核亦根据访问进程的EUID与EGID决定其能否访问文件。
真实用户ID（Real UID,即RUID）与真实用户组ID（Real GID，即RGID）用于辨识进程的真正所有者，且会影响到进程发送信号的权限。没有超级用户权限的进程仅在其RUID与目标进程的RUID相匹配时才能向目标进程发送信号，例如在父子进程间，子进程从父进程处继承了认证信息，使得父子进程间可以互相发送信号。
暂存用户ID（Saved UID，即SUID）于以提升权限运行的进程暂时需要做一些不需特权的操作时使用，这种情况下进程会暂时将自己的有效用户ID从特权用户（常为root）对应的UID变为某个非特权用户对应的UID，而后将原有的特权用户UID复制为SUID暂存；之后当进程完成不需特权的操作后，进程使用SUID的值重置EUID以重新获得特权。在这里需要说明的是，无特权进程的EUID值只能设为与RUID、SUID与EUID（也即不改变）之一相同的值。
文件系统用户ID（File System UID，即FSUID）在Linux中使用，且只用于对文件系统的访问权限控制，在没有明确设定的情况下与EUID相同（若FSUID为root的UID，则SUID、RUID与EUID必至少有一亦为root的UID），且EUID改变也会影响到FSUID。设立FSUID是为了允许程序（如NFS服务器）在不需获取向给定UID账户发送信号的情况下以给定UID的权限来限定自己的文件系统权限。</description>
    </item>
    
    <item>
      <title>find -print -print0</title>
      <link>https://alonsovau.github.io/2017/03/find-print-print0/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/03/find-print-print0/</guid>
      <description>-print  True; print the full file name on the standard output, followed by a newline. If you are
  piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print. See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.</description>
    </item>
    
    <item>
      <title>find命令</title>
      <link>https://alonsovau.github.io/2017/03/find%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/03/find%E5%91%BD%E4%BB%A4/</guid>
      <description>find命令  find (路径) -name 文件名
 find -name &amp;lsquo;*ora*&amp;rsquo; 查找包含ora的文件目录
 find -perm 755 查找权限为755的文件
 find -user root 查找owner为root的文件
 find -group root 查找组为root的文件
 find -mtime -5 更改时间5天内 +5 5天以前
 find -newer myfile2 查找新于myfile2的文件
 find -type d 查找类型为文件夹的文件
 find -size +1k 查找大于1k的文件
 find -type f -exec ls {} \; 注意{}后有空格
 find -ipath &amp;lt;范本样式&amp;gt; 此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别,指定字符串作为寻找目录的范本样式
 find -maxdepth 2 -type f 最大深度为2的文件</description>
    </item>
    
    <item>
      <title>instance database service SID</title>
      <link>https://alonsovau.github.io/2017/03/instance-database-service-sid/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/03/instance-database-service-sid/</guid>
      <description>A database instance is a set of memory structures that manage database files. A database is a set of physical files on disk created by the CREATE DATABASE statement. The instance manages its associated data and serves the users of the database.
Every running Oracle database is associated with at least one Oracle database instance. Because an instance exists in memory and a database exists on disk, an instance can exist without a database and a database can exist without an instance.</description>
    </item>
    
    <item>
      <title>shutdown模式</title>
      <link>https://alonsovau.github.io/2017/03/shutdown%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/03/shutdown%E6%A8%A1%E5%BC%8F/</guid>
      <description>SHUTDOWN ABORT
This mode is intended for emergency situations, such as when no other form of shutdown is successful. This mode of shutdown is the fastest. However, a subsequent open of this database may take substantially longer because instance recovery must be performed to make the data files consistent.
 SHUTDOWN IMMEDIATE
This mode is typically the fastest next to SHUTDOWN ABORT. Oracle Database terminates any executing SQL statements and disconnects users.</description>
    </item>
    
    <item>
      <title>安装xfce4</title>
      <link>https://alonsovau.github.io/2017/03/%E5%AE%89%E8%A3%85xfce4/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/03/%E5%AE%89%E8%A3%85xfce4/</guid>
      <description>sudo apt-get install xinit sudo apt-get update sudo apt-get install xfce4 ubuntu中输入startx</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://alonsovau.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/about/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nec ex vel orci dapibus aliquam non in metus. Vestibulum posuere justo nunc, eu eleifend orci dignissim in. Vestibulum eu eros neque. Quisque luctus posuere sapien nec accumsan. Maecenas mattis, nisl ac dictum ultrices, ligula eros vehicula eros, vel fermentum diam erat eget dolor. Suspendisse vitae felis ligula. Integer quis tincidunt risus, convallis ullamcorper dui. Suspendisse potenti. Sed scelerisque volutpat leo, at mattis ipsum posuere nec.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://alonsovau.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/contact/</guid>
      <description>Contact us!</description>
    </item>
    
  </channel>
</rss>