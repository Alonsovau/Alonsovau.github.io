<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xin Zhou Blog</title>
    <link>https://alonsovau.github.io/</link>
    <description>Recent content on Xin Zhou Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2019 Copyright Zhouxin</copyright>
    <lastBuildDate>Thu, 14 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://alonsovau.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>安装lsyncd</title>
      <link>https://alonsovau.github.io/2019/02/%E5%AE%89%E8%A3%85lsyncd/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2019/02/%E5%AE%89%E8%A3%85lsyncd/</guid>
      <description>1. install Lua5.2 2. install rsync-3.1 3. install lsyncd-2.1.6 2.2.3版本在readhat7.1编译失败 cmake -DCMAKE_C_FLAGS=-ldl . make make install 参考github
PS: example文件夹下有配置文件
setting{ statusFile=&amp;#34;/tmp/lsyncd.stat&amp;#34;, statusInterval = 1, logfile=&amp;#34;/var/log/lsyncd-status.log&amp;#34;, } sync{ default.rsyncssh, source=&amp;#34;/root/zx&amp;#34;, targetdir=&amp;#34;/root/zx&amp;#34;, exclude={&amp;#39;*.csv&amp;#39;, &amp;#39;*.log&amp;#39;, &amp;#39;build&amp;#39;, &amp;#39;nbproject&amp;#39;}, host=&amp;#34;172.30.241.210&amp;#34;, delay=2, rsync = { archive=true, compress=false, whole_file=false, }, ssh = { port=22, --identityFile=&amp;#34;/root/.ssh/id_rsa.pub&amp;#34;, binary=&amp;#34;/usr/bin/ssh&amp;#34;, }, } sync{ default.rsyncssh, source=&amp;#34;/root/zx&amp;#34;, targetdir=&amp;#34;/cffex/zx&amp;#34;, exclude={&amp;#39;*.swx&amp;#39;, &amp;#39;*.swp&amp;#39;, &amp;#39;*.csv&amp;#39;, &amp;#39;*.log&amp;#39;, &amp;#39;build&amp;#39;, &amp;#39;nbproject&amp;#39;}, host=&amp;#34;zhx@172.31.197.10&amp;#34;, delay=2, rsync = { --rsh=&amp;#34;/usr/bin/ssh -l zhx -i /root/.</description>
    </item>
    
    <item>
      <title>Linux和Windows换行</title>
      <link>https://alonsovau.github.io/2019/02/linux%E5%92%8Cwindows%E6%8D%A2%E8%A1%8C/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2019/02/linux%E5%92%8Cwindows%E6%8D%A2%E8%A1%8C/</guid>
      <description>CRLF: Windows \r\n
 LF: Unix and OSX \n
 CR: Classic Mac \r
 Linux下查看格式：
  vi filename :set ff 或者 :set fileformat  修改  - sed -i &amp;#39;s/\r//g&amp;#39; filename - sed -i &amp;#39;s/^M//g&amp;#39; filename - vi filename 然后 set ff=unix 保存  PS:
  注意\^M在linux下写法,按^M是回车换行符,输入方法是按住CTRL+v,松开v,按m</description>
    </item>
    
    <item>
      <title>vmvare multiple network adapters configuration</title>
      <link>https://alonsovau.github.io/2019/02/vmvare-multiple-network-adapters-configuration/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2019/02/vmvare-multiple-network-adapters-configuration/</guid>
      <description>1. add second adapter to virtual machine 2. find out network device name, here is ens33 and ens38 ip a 2: ens33: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:0c:29:53:2f:a9 brd ff:ff:ff:ff:ff:ff inet 192.168.1.150/24 brd 192.168.1.255 scope global dynamic ens33 valid_lft 27719sec preferred_lft 27719sec inet6 fe80::20c:29ff:fe53:2fa9/64 scope link valid_lft forever preferred_lft forever 3: ens38: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:0c:29:53:2f:b3 brd ff:ff:ff:ff:ff:ff 3.</description>
    </item>
    
    <item>
      <title>watchdog</title>
      <link>https://alonsovau.github.io/2018/12/watchdog/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/12/watchdog/</guid>
      <description>The Linux kernel watchdog is used to monitor if a system is running. It is supposed to automatically reboot hanged systems due to unrecoverable software errors. The watchdog module is specific to the hardware or chip being used. Personal computer users don’t need watchdog as they can reset the system manually. However, it is useful for systems that are mission critical and need the ability to reboot themselves without human intervention.</description>
    </item>
    
    <item>
      <title>常用shell</title>
      <link>https://alonsovau.github.io/2018/12/%E5%B8%B8%E7%94%A8shell/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/12/%E5%B8%B8%E7%94%A8shell/</guid>
      <description>#得到当前脚本路径 script=`readlink -f $0` base_dir=`dirname $script` #循环该目录下所有文件 for exchange in `ls /target/sixreceiver -I mdloader` do done #生成一个uuid cat /proc/sys/kernel/random/uuid #查找不区分大小写的name并拷贝指定目录 find . -iname *config.xml -exec cp &amp;#39;{}&amp;#39; ./zx/zx \; #查看压缩包中文件 tar -vtf package.tar.gz #shell函数 func() { }</description>
    </item>
    
    <item>
      <title>编译找不到Lua</title>
      <link>https://alonsovau.github.io/2018/12/%E7%BC%96%E8%AF%91%E6%89%BE%E4%B8%8D%E5%88%B0lua/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/12/%E7%BC%96%E8%AF%91%E6%89%BE%E4%B8%8D%E5%88%B0lua/</guid>
      <description>cmake . -DLUA_INCLUDE_DIR=/usr/local/include/ -DLUA_LIBRARY=/usr/local/lib/liblua.</description>
    </item>
    
    <item>
      <title>查询RPM包信息</title>
      <link>https://alonsovau.github.io/2018/11/%E6%9F%A5%E8%AF%A2rpm%E5%8C%85%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/%E6%9F%A5%E8%AF%A2rpm%E5%8C%85%E4%BF%A1%E6%81%AF/</guid>
      <description># 查询文件属于哪个安装包 $ rpm -qf /usr/bin/ldd # 查询某个目录、文件、模块是由哪个包提供 $ rpm -q --whatprovides /usr/bin # 查询被哪个包需要 $ rpm -q --whatrequires /usr/bin/lynx # 查询包中文件 $ rpm -qpl filename # 查询已安装文件 $ rpm -ql name # 查询配置文件 $ rpm -qpc filename $ rpm -qc name # 查询所有信息 $ rpm -qpil filename $ rpm -qil name</description>
    </item>
    
    <item>
      <title>查询缺少的so由什么提供</title>
      <link>https://alonsovau.github.io/2018/11/%E6%9F%A5%E8%AF%A2%E7%BC%BA%E5%B0%91%E7%9A%84so%E7%94%B1%E4%BB%80%E4%B9%88%E6%8F%90%E4%BE%9B/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/%E6%9F%A5%E8%AF%A2%E7%BC%BA%E5%B0%91%E7%9A%84so%E7%94%B1%E4%BB%80%E4%B9%88%E6%8F%90%E4%BE%9B/</guid>
      <description>$ yum list name 可以看包版本 $ yum provides libselinux.so.1 libselinux-2.0.94-5.3.el6.i686 : SELinux library and simple utilities Repo : local Matched from: Other : libselinux.</description>
    </item>
    
    <item>
      <title>查看binary的symbol</title>
      <link>https://alonsovau.github.io/2018/11/%E6%9F%A5%E7%9C%8Bbinary%E7%9A%84symbol/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/%E6%9F%A5%E7%9C%8Bbinary%E7%9A%84symbol/</guid>
      <description>readelf -s filename nm filename |grep xxx</description>
    </item>
    
    <item>
      <title>根据进程名kill</title>
      <link>https://alonsovau.github.io/2018/11/%E6%A0%B9%E6%8D%AE%E8%BF%9B%E7%A8%8B%E5%90%8Dkill/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/%E6%A0%B9%E6%8D%AE%E8%BF%9B%E7%A8%8B%E5%90%8Dkill/</guid>
      <description>#!/bin/sh  if [ $# -lt 1 ] then echo Usage:xx exit 1 fi NAME=$1 echo $1 PID=`ps -ef|grep $NAME$ |grep -v $0 |awk &amp;#39;{print $2}&amp;#39;` echo $PID kill -9 $PID echo killed</description>
    </item>
    
    <item>
      <title>core文件</title>
      <link>https://alonsovau.github.io/2018/11/core%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/11/core%E6%96%87%E4%BB%B6/</guid>
      <description>1.ulimit -c unlimited 2./proc/sys/kernel/core_pattern 2.或者/etc/sysctl.conf中添加kernel.core_pattern=core_%e_%p或sysctl -w kernel.core_pattern=core_%e_%p 3.查看/etc/security/limits.conf * soft core unlimited //所有用户 &amp;lt;user-login-id&amp;gt; soft core unlimited //设置某个用户 还有hard core需要考虑$sysctl -a|grep core_pattern kernel.core_pattern = |/usr/libexec/abrt-hook-ccpp /var/cache/abrt %p %s %u %c
“abrtd” creates a sub-directory (named something like “ccpp-1279914365-14618”) in the directory “/var/cache/abrt” as shown in the value of the variable. This also means that the core files will also be stored in that sub-directory in the “/var/cache/abrt” directory (in addition to the current directory where application was run).</description>
    </item>
    
    <item>
      <title>账户锁定及SSH登录失败</title>
      <link>https://alonsovau.github.io/2018/09/%E8%B4%A6%E6%88%B7%E9%94%81%E5%AE%9A%E5%8F%8Assh%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/09/%E8%B4%A6%E6%88%B7%E9%94%81%E5%AE%9A%E5%8F%8Assh%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5/</guid>
      <description>1. Pam_Tally2解锁SSH登录失败锁定 路径: /etc/pam.d/password-auth，/etc/pam.d/system-auth A pluggable authentication module (PAM) is a mechanism to integrate multiple low-level authentication schemes into a high-level application programming interface (API) Example: auth required pam_tally2.so deny=4 even_deny_root unlock_time=1200  deny 指定最大几次认证错误，如果超出此错误，将执行后面的策略。如锁定N秒，如果后面没有其他策略指定时，默认永远锁定，除非手动解锁
 lock_time 锁定多长时间，按秒为单位
 unlock_time 指定认证被锁后，多长时间自动解锁用户
 even_deny_root root用户在认证出错时，一样被锁定
  2. 查看状态与解锁 pam_tally2 --user oracle pam_tally2 --user oracle --reset 3. Linux锁定账号  禁止个别用户登录(su可切换)
passwd -l test passwd -u test 修改shell类型禁止登录(su切换不可)
cat /etc/passwd |grep zx 锁定： sed -i &amp;#39;s#/home/zx:/bin/bash#/home/zx:/sbin/nologin#g&amp;#39; /etc/passwd 等价于： usermod zx -s /sbin/nologin 解锁： sed -i &amp;#39;s#/home/zx:/sbin/nologin#/home/zx:/bin/bash#g&amp;#39; /etc/passwd 等价于： usermod zx -s /bin/bash 禁止其他用户登录(su可切换)</description>
    </item>
    
    <item>
      <title>tcpdump</title>
      <link>https://alonsovau.github.io/2018/09/tcpdump/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/09/tcpdump/</guid>
      <description>tcpdump -i eth0 vrrp -n</description>
    </item>
    
    <item>
      <title>apt search精确匹配</title>
      <link>https://alonsovau.github.io/2018/07/apt-search%E7%B2%BE%E7%A1%AE%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/apt-search%E7%B2%BE%E7%A1%AE%E5%8C%B9%E9%85%8D/</guid>
      <description>apt search: limit to exact match
apt search ^python$ #正则表达式 apt search --names-only python</description>
    </item>
    
    <item>
      <title>查询Linux进程启动和运行时间</title>
      <link>https://alonsovau.github.io/2018/07/%E6%9F%A5%E8%AF%A2linux%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/%E6%9F%A5%E8%AF%A2linux%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</guid>
      <description>ps -eo pid,start,etime,cmd |grep -v grep | grep ss</description>
    </item>
    
    <item>
      <title>No MTA installed, discarding output</title>
      <link>https://alonsovau.github.io/2018/07/no-mta-installed-discarding-output/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/no-mta-installed-discarding-output/</guid>
      <description> 配置邮件服务器
 重定向到文件或者/dev/null：cd /opt/ &amp;amp;&amp;amp; ./start_sslocal.sh &amp;gt;zx.log 2&amp;gt;&amp;amp;1
  </description>
    </item>
    
    <item>
      <title>添加开机启动脚本</title>
      <link>https://alonsovau.github.io/2018/07/%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</guid>
      <description>1.crontab -e
1. crontab -e 2. @reboot cd /opt/ &amp;amp;&amp;amp; ./start_sslocal.sh &amp;gt;zx.log 2&amp;gt;&amp;amp;1 3. grep CRON -i /var/log/syslog 2.</description>
    </item>
    
    <item>
      <title>Ubuntu网卡重启</title>
      <link>https://alonsovau.github.io/2018/07/ubuntu%E7%BD%91%E5%8D%A1%E9%87%8D%E5%90%AF/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/ubuntu%E7%BD%91%E5%8D%A1%E9%87%8D%E5%90%AF/</guid>
      <description>ifconfig ens33 down &amp;amp;&amp;amp; ifconfig ens33 up</description>
    </item>
    
    <item>
      <title>命令行设置代理</title>
      <link>https://alonsovau.github.io/2018/07/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</guid>
      <description>sslocal
apt install shadowsocks sslocal -c ss.json -d startss.json: { &amp;#34;server&amp;#34;:&amp;#34;45.32.10.1&amp;#34;, &amp;#34;server_port&amp;#34;:8892, &amp;#34;local_port&amp;#34;:1080, &amp;#34;password&amp;#34;:&amp;#34;zxzxzxzxzx&amp;#34;, &amp;#34;timeout&amp;#34;:600, &amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34; } proxychains4
apt install proxychains4 vi /etc/proxychains4.conf proxychains4 curl ip.cn # 查看是否代理成功 proxychains bash # 代理整个终端proxychains4.conf: socks5 127.0.0.1 1080 GitHub
 polipo可代替proxychains4
apt-get install polipo vi /etc/polipo/config service polipo restart export http_proxy=&amp;#34;http://127.0.0.1:8123/&amp;#34; # 可能需要执行 可加入.bashrc/etc/polipo/config: logSyslog = true logFile = /var/log/polipo/polipo.log proxyAddress = &amp;#34;0.0.0.0&amp;#34; socksParentProxy = &amp;#34;127.0.0.1:1080&amp;#34; socksProxyType = socks5 proxyPort = 8123 chunkHighMark = 50331648 objectHighMark = 16384 serverMaxSlots = 64 serverSlots = 16 serverSlots1 = 32 genpac</description>
    </item>
    
    <item>
      <title>Linux swap配置</title>
      <link>https://alonsovau.github.io/2018/07/linux-swap%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/07/linux-swap%E9%85%8D%E7%BD%AE/</guid>
      <description>#查看swap比率 cat /proc/sys/vm/swappiness # open /etc/sysctl.conf as root. Then, change or add this line to the file vm.swappiness = 10 # Reboot for the change to take effect. # You can also change the value while your system is still running with sysctl vm.swappiness=10 # You can also clear your swap by running swapoff -a and then swapon -a as root instead of rebooting to achieve the same effect. swapoff -a swapon -a</description>
    </item>
    
    <item>
      <title>文件及Terminal终端编码</title>
      <link>https://alonsovau.github.io/2018/06/%E6%96%87%E4%BB%B6%E5%8F%8Aterminal%E7%BB%88%E7%AB%AF%E7%BC%96%E7%A0%81/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/06/%E6%96%87%E4%BB%B6%E5%8F%8Aterminal%E7%BB%88%E7%AB%AF%E7%BC%96%E7%A0%81/</guid>
      <description>1. set fileencoding 查看文件编码 2. set fileencdding=utf-8 设置文件编码 按wq保存 3. :e ++enc=cp936 # vim打开文档后，encoding=utf-8（locale决定的），fileencoding=latin1（自动编码判断机制不准导致的），termencoding=空（默认无需转换term编码），显示文件为乱码</description>
    </item>
    
    <item>
      <title>网络相关</title>
      <link>https://alonsovau.github.io/2018/04/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/04/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/</guid>
      <description>arp -a 搜索同一网段机器 iptables -L -n -v 查看已添加的iptables规则 清空日志文件： cat /dev/null&amp;gt;/var/log/messages</description>
    </item>
    
    <item>
      <title>crontab</title>
      <link>https://alonsovau.github.io/2018/02/crontab/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/crontab/</guid>
      <description> 1. 用法： 1.cat /etc/crontab 系统级 2./etc/cron.deny 所列用户不允许使用 3./etc/cron.allow 所列用户允许使用 4./var/spool/cron/ 下存储以用户名存储的文件 5.minute hour day month week command 6.crontab [-u user] -l 显示当前用户任务 7.crontab -l &amp;gt; z 备份当前用户的任务到z文件 8.crontab [-u user] -e 编辑当前用户的任务 9.crontab [-u user] -r 删除 10.crontab &amp;lt;filename&amp;gt; 从文件恢复 11.service crond start/stop/restart/reload 2. 例子： * * * * * command 每分钟执行 3,15 * * * * command 每小时第3，15分钟执行 3,15 8-11 */2 * * command 每2天的8-11点的第3，15分钟执行 30 21 * * 0,6 command 每周日、周六21:30分执行 * */2 * * * command 每2小时执行</description>
    </item>
    
    <item>
      <title>sed</title>
      <link>https://alonsovau.github.io/2018/02/sed/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/sed/</guid>
      <description>语法 sed [-hnV][-e&amp;lt;script&amp;gt;][-f&amp;lt;script文件&amp;gt;][文本文件] 参数 -e&amp;lt;script&amp;gt;或--expression=&amp;lt;script&amp;gt; 以选项中指定的script来处理输入的文本文件 -f&amp;lt;script文件&amp;gt;或--file=&amp;lt;script文件&amp;gt; 以选项中指定的script文件来处理输入的文本文件 -h或--help 显示帮助 -n或--quiet或--silent 仅显示script处理后的结果 -V或--version 显示版本信息 动作  a: 新增，在匹配的下一行新增一行
 i: 插入，转匹配的上一行新增一行
 c: 取代，c后面是将替换的值
 d: 删除，删除指定行
 p: 打印，通常与sed -n一起使用
 s: 取代，进行搜索
  例子  sed -e 4a\zx zx.txt：在第四行后面加zx，输出到标准输出，macOS语法错误
 nl zx.txt |sed &amp;lsquo;2,5d&amp;rsquo;：列出内容并列出行号，同时删除2-5行
 nl zx.txt |sed &amp;lsquo;2,$d&amp;rsquo;：删除2到最后一行
 nl zx.txt |sed &amp;lsquo;2a zx&amp;rsquo;：第二行后增加zx，行前使用2i,macOS不可
 nl zx.txt |sed &amp;lsquo;2a zx\按enter键xz&amp;rsquo;：第二行后加zx，xz2行数据，macOS不可
 nl zx.txt |sed &amp;lsquo;2,3c kol&amp;rsquo;：2到3行替换为kol</description>
    </item>
    
    <item>
      <title>查看机器重启时间</title>
      <link>https://alonsovau.github.io/2018/02/%E6%9F%A5%E7%9C%8B%E6%9C%BA%E5%99%A8%E9%87%8D%E5%90%AF%E6%97%B6%E9%97%B4/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2018/02/%E6%9F%A5%E7%9C%8B%E6%9C%BA%E5%99%A8%E9%87%8D%E5%90%AF%E6%97%B6%E9%97%B4/</guid>
      <description>who -b 上次启动时间 last reboot 系统启动记录 last reboot |head -1 最后一次启动时间 w 可查看系统已经运行时间 top 也可查看</description>
    </item>
    
    <item>
      <title>输出重定向到文件</title>
      <link>https://alonsovau.github.io/2017/10/%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/10/%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6/</guid>
      <description>ls &amp;gt; log.log ls &amp;gt;&amp;gt; log.log --不覆盖log.log，追加 cat 1.txt 2&amp;gt; log.log --错误输出到log.log cat 1.txt &amp;gt; log.log 2&amp;gt;&amp;amp;1 --stderr也输出到stdout stdin 0 &amp;lt; stdout 1 1&amp;gt; stderr 2 2&amp;gt;</description>
    </item>
    
    <item>
      <title>ubuntu server通过vnc连接(xrdp亦可)</title>
      <link>https://alonsovau.github.io/2017/04/ubuntu-server%E9%80%9A%E8%BF%87vnc%E8%BF%9E%E6%8E%A5xrdp%E4%BA%A6%E5%8F%AF/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/04/ubuntu-server%E9%80%9A%E8%BF%87vnc%E8%BF%9E%E6%8E%A5xrdp%E4%BA%A6%E5%8F%AF/</guid>
      <description>1.安装
apt-get install vnc4server 2.设置密码
vncpasswd 或者
vncserver 创建一个
3.启动vnc
vncserver:1 4.启动vnc客户端
输入IP地址加:1,例如192.168.1.104:1
5.配置文件
进入/root/.vnc
vi xstartup #!/bin/sh  # Uncomment the following two lines for normal desktop: # unset SESSION_MANAGER # exec /etc/X11/xinit/xinitrc [ -x /etc/vnc/xstartup ] &amp;amp;&amp;amp; exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources xsetroot -solid grey vncconfig -iconic &amp;amp; #x-terminal-emulator -geometry 80x24+10+10 -ls -title &amp;#34;$VNCDESKTOP Desktop&amp;#34; &amp;amp; #x-window-manager &amp;amp; sesion-manager &amp;amp; xfdesktop &amp;amp; xfce4-panel &amp;amp; xfce4-menu-plugin &amp;amp; xfsettingsd &amp;amp; xfconfd &amp;amp; xfwm4 &amp;amp;  6.</description>
    </item>
    
    <item>
      <title>EUID、SUID、RUID、</title>
      <link>https://alonsovau.github.io/2017/03/euidsuidruid/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/03/euidsuidruid/</guid>
      <description>有效用户ID（Effective UID，即EUID）与有效用户组ID（Effective Group ID，即EGID）在创建与访问文件的时候发挥作用；具体来说，创建文件时，系统内核将根据创建文件的进程的EUID与EGID设定文件的所有者/组属性，而在访问文件时，内核亦根据访问进程的EUID与EGID决定其能否访问文件。
真实用户ID（Real UID,即RUID）与真实用户组ID（Real GID，即RGID）用于辨识进程的真正所有者，且会影响到进程发送信号的权限。没有超级用户权限的进程仅在其RUID与目标进程的RUID相匹配时才能向目标进程发送信号，例如在父子进程间，子进程从父进程处继承了认证信息，使得父子进程间可以互相发送信号。
暂存用户ID（Saved UID，即SUID）于以提升权限运行的进程暂时需要做一些不需特权的操作时使用，这种情况下进程会暂时将自己的有效用户ID从特权用户（常为root）对应的UID变为某个非特权用户对应的UID，而后将原有的特权用户UID复制为SUID暂存；之后当进程完成不需特权的操作后，进程使用SUID的值重置EUID以重新获得特权。在这里需要说明的是，无特权进程的EUID值只能设为与RUID、SUID与EUID（也即不改变）之一相同的值。
文件系统用户ID（File System UID，即FSUID）在Linux中使用，且只用于对文件系统的访问权限控制，在没有明确设定的情况下与EUID相同（若FSUID为root的UID，则SUID、RUID与EUID必至少有一亦为root的UID），且EUID改变也会影响到FSUID。设立FSUID是为了允许程序（如NFS服务器）在不需获取向给定UID账户发送信号的情况下以给定UID的权限来限定自己的文件系统权限。</description>
    </item>
    
    <item>
      <title>find -print -print0</title>
      <link>https://alonsovau.github.io/2017/03/find-print-print0/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/03/find-print-print0/</guid>
      <description>-print  True; print the full file name on the standard output, followed by a newline. If you are
  piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print. See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.</description>
    </item>
    
    <item>
      <title>find命令</title>
      <link>https://alonsovau.github.io/2017/03/find%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/03/find%E5%91%BD%E4%BB%A4/</guid>
      <description>find命令  find (路径) -name 文件名
 find -name &amp;lsquo;*ora*&amp;rsquo; 查找包含ora的文件目录
 find -perm 755 查找权限为755的文件
 find -user root 查找owner为root的文件
 find -group root 查找组为root的文件
 find -mtime -5 更改时间5天内 +5 5天以前
 find -newer myfile2 查找新于myfile2的文件
 find -type d 查找类型为文件夹的文件
 find -size +1k 查找大于1k的文件
 find -type f -exec ls {} \; 注意{}后有空格
 find -ipath &amp;lt;范本样式&amp;gt; 此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别,指定字符串作为寻找目录的范本样式
 find -maxdepth 2 -type f 最大深度为2的文件</description>
    </item>
    
    <item>
      <title>安装xfce4</title>
      <link>https://alonsovau.github.io/2017/03/%E5%AE%89%E8%A3%85xfce4/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/2017/03/%E5%AE%89%E8%A3%85xfce4/</guid>
      <description>sudo apt-get install xinit sudo apt-get update sudo apt-get install xfce4 ubuntu中输入startx</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://alonsovau.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/about/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nec ex vel orci dapibus aliquam non in metus. Vestibulum posuere justo nunc, eu eleifend orci dignissim in. Vestibulum eu eros neque. Quisque luctus posuere sapien nec accumsan. Maecenas mattis, nisl ac dictum ultrices, ligula eros vehicula eros, vel fermentum diam erat eget dolor. Suspendisse vitae felis ligula. Integer quis tincidunt risus, convallis ullamcorper dui. Suspendisse potenti. Sed scelerisque volutpat leo, at mattis ipsum posuere nec.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://alonsovau.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alonsovau.github.io/contact/</guid>
      <description>Contact us!</description>
    </item>
    
  </channel>
</rss>